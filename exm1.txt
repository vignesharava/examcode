a. Create an HTML file with the following content
<!DOCTYPE html>
<html>
<head>
    <title>Welcome Page</title>
</head>
<body>
    <h1>Welcome Page</h1>
    <form>
        <label for="name">Enter your name:</label>
        <input type="text" id="name" name="name" required>
        <button type="button" onclick="displayWelcome()">Submit</button>
    </form>
    <p id="welcomeMessage"></p>
    <script>
        function displayWelcome() {
            var name = document.getElementById("name").value;
            var welcomeMessage = document.getElementById("welcomeMessage");
            welcomeMessage.innerHTML = "Welcome, " + name + "!";
        }
    </script>
</body>
</html>

b. Create a dockerfile to serve this html file using NGINX server

FROM nginx
COPY index.html /usr/share/nginx/html/index.html
EXPOSE 80


UBUNTU:
FROM ubuntu:jammy-20230916

LABEL maintainer="namrata <dasnamrata795@gmail.com>"

LABEL description="This example Dockerfile installs ubuntu and displays a message."

RUN apt-get update

CMD ["echo", "Hello World...! from my first docker image"]


JENKINS:
node{
stage('Compile'){
		echo "Compiled Successfully!!";
	}

stage('JUnit') {
		echo "JUnit Passed Succesfully!";
}

stage('Quality-Gate') {
		echo "SonarQube Quality Gate passed succesfully!!";
						/*sh exit ("1");*/
}

stage('Deploy') {
		echo "Pass!";
}
}



2.
pipeline {
	agent any
	stages {
		stage('Git-Checkout'){
			steps {
				echo "Checking out from Git Repo";
			}
		}

		stage('Build') {
			steps {
				echo "Building the checkedout project!";
			}
		}

		stage('Unit-Test') {
			steps {
				echo "Running JUnit tests";
			}
		}
		stage('Quality-Gate') {
			steps {
				echo "Verifying Quality Gates";
			}
		}

		stage('Deploy') {
			steps {
				echo "Deploying to stage environments for more tests";
			}
		}
	}
	
		post {
			always {
					echo 'This will always run'
				}
			success {
					echo 'This will run only if successful'
				}
			failure {
					echo 'This will run only if failed'
				}
			unstable {
					echo 'This will run only if the run was marked as unstable'
				}
	    		changed {
					echo 'This will run only if the state of the pipeline has changed'
					echo 'For example, if the pipeline was previously failing but is now successful'
				}
   		 }
}


